#!/bin/bash

set -euo pipefail

: ${1?"Not enough arguments: `basename $0` file.{txt,json}
TXT file name must be in form *.<type>.txt. There type one of http, socks4, socks5 and so on."}

#" Logging
_log_file="${1}.$(date --iso-8601=s).log"

source ~/bin/SHARED/examples/autologging-with-progress/4.pv-ts.stdbuf

_type="$(echo ${1} | sed -r 's/(.+\.)?(.+?)\.(txt|json)/\2/')"
if [[ ${1} == *.json ]]; then
	echo "Processing list [${1}] as JSON"
	# Support several format of structure automatically: .data.[], .[] and so on
	function _READ(){ jq -c "{ \"address\": .[]?.items?[]?, \"protocols\": [\"${_type}\"] } // (.data? // .items? // .).[]" "${1}"; }
	# $1 - proxy string
	# $2 - proxy list type
	function proxy_parse(){
		# Try universally parse all incoming structures:
		echo -n "${1}" \
			| jq -r '
				(.ip? // .address? // .IP_Address?) as $addr |
				((.Port? // .port?) | tostring) as $port |
					(.protocols[0] // .Type // .protocol) + "://" + $addr + (if "null" != $port then ":" + $port else "" end)'
	}
else # assume text
	echo "Processing list [${1}] as TEXT file with default type [${_type}]" > /dev/stderr
	function _READ() { cat "${1}"; }
	# $1 - proxy string
	# $2 - proxy list type
	function proxy_parse(){
		local proxy="${1}"
		local _type="${2}"
		if [[ ${proxy} != *://* ]]; then
			if [ -z "${_type}" ]; then
				echo "Proxy [${proxy}] without protocol, and type not provided for the list! Please use file name in form *.<type>.txt. There type one of http, socks4, socks5 and so on.";
				exit 1
			else
				echo -n "${_type}://${proxy}"
			fi
		else
			echo -n "${proxy}"
		fi
	}
fi
export -f _READ proxy_parse

# $1 proxy string for parse
# $2 run number (for logging)
# $3 total proxies in list (for logging)
# $4 processed file for logging and write ${4}.good
# $5 proxy list type (default type of proxy)
function process_proxy_candidate(){
	local _proxy="${1}"
	local _i="${2}"
	local _total="${3}"
	local _file="${4}"
	local _type="${5}"
	local proxy=$(proxy_parse "${_proxy}" "${_type}")
	[ $? -ne 0 ] && echo "Error parsing RAW proxy: ${_proxy}" && exit 2
	echo -e "\e[4;49;32m${_i})\e[0m/\e[1;49;92m${_total}\e[0m) [\e[1;49;95m${_file}\e[0m] Checking [${proxy}]"
	if curl -sSf --no-progress-meter --connect-timeout 15 --max-time 100 --proxy "${proxy}" https://ifconfig.co; then
		echo "${proxy}" >> "${_file}.candidate"
		echo "Proxy looks [${proxy}] alive! Rechecking with bigger file:"
		./proxy.check.one "${proxy}"
		if [ $? -eq 0 ]; then
			echo "Indeed proxy [${proxy}] ALIVE!"
			echo "${proxy}" >> "${_file}.good"
			echo "${proxy} $(curl -sSf --retry 5 --retry-all-errors --connect-timeout 15 --max-time 100 --proxy "${proxy}" https://ifconfig.co/json | jq . -c) ${_proxy}" >> "${_file}.good-with-info"
		else
			echo "Proxy [${proxy}] failed individual check! Skipping"
		fi
	fi
}
export -f process_proxy_candidate

total=$(_READ "$1" | wc -l)
# From http://free-proxy.cz/en/proxylist/country/all/socks5/ping/all
_READ "${1}" \
	| parallel --bar -j250 process_proxy_candidate {} {#} ${total} "${1}" "${_type}" 2>&6
# Note: 2>&6 used to show progress of parallel in interractive run, but do not write it into log

[ -f "${1}.good" ] && echo 'Found good proxies: ' && cat "${1}.good"

echo "LIST [${1}] processing done"
